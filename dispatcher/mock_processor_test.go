// Code generated by mockery v2.36.1. DO NOT EDIT.

package dispatcher

import (
	input "github.com/laonix/hopping-race-tracks/input"
	mock "github.com/stretchr/testify/mock"

	pathfinder "github.com/laonix/hopping-race-tracks/pathfinder"
)

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor struct {
	mock.Mock
}

type MockProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessor) EXPECT() *MockProcessor_Expecter {
	return &MockProcessor_Expecter{mock: &_m.Mock}
}

// GetGrid provides a mock function with given fields: rows, cols, obstacles
func (_m *MockProcessor) GetGrid(rows int, cols int, obstacles ...pathfinder.Obstacle) *pathfinder.Grid {
	_va := make([]interface{}, len(obstacles))
	for _i := range obstacles {
		_va[_i] = obstacles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rows, cols)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pathfinder.Grid
	if rf, ok := ret.Get(0).(func(int, int, ...pathfinder.Obstacle) *pathfinder.Grid); ok {
		r0 = rf(rows, cols, obstacles...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pathfinder.Grid)
		}
	}

	return r0
}

// MockProcessor_GetGrid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrid'
type MockProcessor_GetGrid_Call struct {
	*mock.Call
}

// GetGrid is a helper method to define mock.On call
//   - rows int
//   - cols int
//   - obstacles ...pathfinder.Obstacle
func (_e *MockProcessor_Expecter) GetGrid(rows interface{}, cols interface{}, obstacles ...interface{}) *MockProcessor_GetGrid_Call {
	return &MockProcessor_GetGrid_Call{Call: _e.mock.On("GetGrid",
		append([]interface{}{rows, cols}, obstacles...)...)}
}

func (_c *MockProcessor_GetGrid_Call) Run(run func(rows int, cols int, obstacles ...pathfinder.Obstacle)) *MockProcessor_GetGrid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]pathfinder.Obstacle, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(pathfinder.Obstacle)
			}
		}
		run(args[0].(int), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockProcessor_GetGrid_Call) Return(_a0 *pathfinder.Grid) *MockProcessor_GetGrid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcessor_GetGrid_Call) RunAndReturn(run func(int, int, ...pathfinder.Obstacle) *pathfinder.Grid) *MockProcessor_GetGrid_Call {
	_c.Call.Return(run)
	return _c
}

// GetPathfinder provides a mock function with given fields: g, distance
func (_m *MockProcessor) GetPathfinder(g *pathfinder.Grid, distance pathfinder.Heuristic) pathfinder.Pathfinder {
	ret := _m.Called(g, distance)

	var r0 pathfinder.Pathfinder
	if rf, ok := ret.Get(0).(func(*pathfinder.Grid, pathfinder.Heuristic) pathfinder.Pathfinder); ok {
		r0 = rf(g, distance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pathfinder.Pathfinder)
		}
	}

	return r0
}

// MockProcessor_GetPathfinder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPathfinder'
type MockProcessor_GetPathfinder_Call struct {
	*mock.Call
}

// GetPathfinder is a helper method to define mock.On call
//   - g *pathfinder.Grid
//   - distance pathfinder.Heuristic
func (_e *MockProcessor_Expecter) GetPathfinder(g interface{}, distance interface{}) *MockProcessor_GetPathfinder_Call {
	return &MockProcessor_GetPathfinder_Call{Call: _e.mock.On("GetPathfinder", g, distance)}
}

func (_c *MockProcessor_GetPathfinder_Call) Run(run func(g *pathfinder.Grid, distance pathfinder.Heuristic)) *MockProcessor_GetPathfinder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pathfinder.Grid), args[1].(pathfinder.Heuristic))
	})
	return _c
}

func (_c *MockProcessor_GetPathfinder_Call) Return(_a0 pathfinder.Pathfinder) *MockProcessor_GetPathfinder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcessor_GetPathfinder_Call) RunAndReturn(run func(*pathfinder.Grid, pathfinder.Heuristic) pathfinder.Pathfinder) *MockProcessor_GetPathfinder_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: _a0
func (_m *MockProcessor) Process(_a0 *input.TestCase) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*input.TestCase) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*input.TestCase) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*input.TestCase) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - _a0 *input.TestCase
func (_e *MockProcessor_Expecter) Process(_a0 interface{}) *MockProcessor_Process_Call {
	return &MockProcessor_Process_Call{Call: _e.mock.On("Process", _a0)}
}

func (_c *MockProcessor_Process_Call) Run(run func(_a0 *input.TestCase)) *MockProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*input.TestCase))
	})
	return _c
}

func (_c *MockProcessor_Process_Call) Return(_a0 string, _a1 error) *MockProcessor_Process_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProcessor_Process_Call) RunAndReturn(run func(*input.TestCase) (string, error)) *MockProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor {
	mock := &MockProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
